Please see ./results folder for images generated:

    Submission

    We are submitting ray tracer code and the images generated by it.

    - part 1 images are
        - sig1.bmp and sig2.bmp which shows scene signature with ambient colour
        - diffuse1.bmp and diffuse2.bmp that shows ambient + diffuse
        - phong1.bmp and phong2.bmp that shows full phong shading

    - part 2 we have implemented, in addition to hard shadow (hardshadow1.bmp, hardshadow2.bmp) and reflection (sharp.bmp):
        1. Soft shadows using area light (softshadow1.bmp, softshadow2.bmp)
        2. Antialising using jitter samples (9xSSAA1.bmp, 9xSSAA2.bmp)
        3. Glossy reflection (glossy.bmp)
        4. Motion blur, but instead of moving object we have moving camera (blur.bmp)
        5. Depth of field (dof.bmp)

    Some parts to note:
        - compare softshadow2.bmp to hardshadow2.bmp to see soft shadow effect. One thing worth noticing is that you may notice softshadow*.bmp is missing specular part of phong shading, it's not a bug, but because we turned off specular accidentally before rendering that frame. The particular rending setting is lost by the time we noticed, therefore the frame is not corrected. To see it's not a bug, see finitemirrors.bmp to see both soft shadow AND full phong shading.
        - compare hardshadow1.bmp to 9XSSAA1.bmp to see antialiasing around the spheres.
        - compare glossy.bmp to sharp.bmp to see glossy reflection on the wall.
        - dof.bmp and blur.bmp are self explanatory, but for blur.bmp the camera is in motion toward the gold sphere, so the gold sphere is completely in focus.
        - no external library except fopenmp is used

--

    Structure

    - main.cpp contains all geometric shapes (spheres and planes), lights and cameras that defines the scene. It has a int deg that controls the sqrt(numpixels) used in antialiasing.

    - Most other things happen in raytracer.cpp. Shadows and reflections are handled in shadeRay function, controled by numShadowRay and numReflectRay for soft shadow and glossy reflection. In render function there are 3 nested loops with variables t, n, d. t is time tick used to generate motion blur, n is used to compute subpixels in antialiasing, d is to compute sample rays in depth of field.

    - AreaLight is implemented in light_source.h and .cpp, the only difference is that get_position returns a random position in a sphere of radius 0.5.

    - Change the parameters in-program and recompile. No parameters except height and width is parsed from commandline.

--

    Contribution

    Both members wrote part 1. For part 2, Ziyao did Antialising, depth of field, soft shadow algorithm. Qinghui did area light, set up the scene, glossy reflection, motion blur and the report you are reading now.

--

The final image, finitemirrors.bmp is 4xAA, has soft shadows and 4 layers of reflection. It is inspired by infinity mirrors exhibition in AGO, except with way less balls, thus finite mirror. A cube closure with perfectly reflective mirror shows off shadows and reflections, which adds impressive depth to the image. However, limitation of time and technology means we cannot produce the likes of infinity mirror.


    - Qinghui Yu, Ziyao Ye
